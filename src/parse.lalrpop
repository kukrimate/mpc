use crate::ast::*;
use crate::util::*;
use std::str::FromStr;
use indexmap::{indexmap,IndexMap};

grammar(module: &mut Module);

Path: Path = {
  Identifier  => vec![<>],
  <mut v:Path> "::" <i:Identifier> => {
    v.push(i);
    v
  }
};

// Types

TypeName: Ty = {
  <p:Path>    => Ty::Path(p),
  "Bool"      => Ty::Bool,
  "Uint8"     => Ty::Uint8,
  "Int8"      => Ty::Int8,
  "Uint16"    => Ty::Uint16,
  "Int16"     => Ty::Int16,
  "Uint32"    => Ty::Uint32,
  "Int32"     => Ty::Int32,
  "Uint64"    => Ty::Uint64,
  "Int64"     => Ty::Int64,
  "Uintn"     => Ty::Uintn,
  "Intn"      => Ty::Intn,
  "Function" "(" <params:ParameterListOpt> ")" <ret:ReturnType> =>
    Ty::Fn(params, Box::new(ret)),
  "*" <ty:TypeName> =>
    Ty::Ptr(Box::new(ty)),
  "[" <l:Expr> "]" <t:TypeName> =>
    Ty::Arr(Box::new(l), Box::new(t)),
  "(" <params:ParameterListOpt>  ")" =>
    Ty::Tuple(params)
};

ParameterListOpt: IndexMap<RefStr, Ty> = {
  ParameterList,
  => indexmap! {},
};

ParameterList: IndexMap<RefStr, Ty> = {
  <name:Identifier> ":" <ty:TypeName> => indexmap! { name => ty },
  <mut l:ParameterList> "," <name:Identifier> ":" <ty:TypeName> => {
    l.insert(name, ty);
    l
  },
};

ReturnType: Ty = {
  "->" <t:TypeName> => t,
  => Ty::Tuple(indexmap! {})
};

// Blocks

Block: Expr = {
  "{" "}" => Expr::Block(vec![]),
  "{" <v:BlockItemList> ";"? "}" => Expr::Block(v),
};

BlockItemList: Vec<Expr> = {
  BlockItem => vec![<>],
  <mut v:BlockItemList> ";" <i:BlockItem> => {
    v.push(i);
    v
  }
};

BlockItem: Expr = {
  Expr,
  "let" <m:"mut"?> <n:Identifier> <t:LetType> "=" <i:Expr> =>
    Expr::Let(n, m.is_some(), t, Box::new(i)),
  "continue" => Expr::Continue,
  "break" <e:Expr?> => Expr::Break(e.map(|e| Box::new(e))),
  "return" <e:Expr?> => Expr::Return(e.map(|e| Box::new(e))),
  "if" <e:Expr> <b:Block> => Expr::If(Box::new(e), Box::new(b), None),
  "while" <e:Expr> <b:Block> => Expr::While(Box::new(e), Box::new(b)),
  <l:Expr> "=" <r:Expr> => Expr::As(Box::new(l), Box::new(r)),
  <l:Expr> "*=" <r:Expr> => Expr::MulAs(Box::new(l), Box::new(r)),
  <l:Expr> "/=" <r:Expr> => Expr::DivAs(Box::new(l), Box::new(r)),
  <l:Expr> "%=" <r:Expr> => Expr::ModAs(Box::new(l), Box::new(r)),
  <l:Expr> "+=" <r:Expr> => Expr::AddAs(Box::new(l), Box::new(r)),
  <l:Expr> "-=" <r:Expr> => Expr::SubAs(Box::new(l), Box::new(r)),
  <l:Expr> "<<=" <r:Expr> => Expr::LshAs(Box::new(l), Box::new(r)),
  <l:Expr> ">>=" <r:Expr> => Expr::RshAs(Box::new(l), Box::new(r)),
  <l:Expr> "&=" <r:Expr> => Expr::AndAs(Box::new(l), Box::new(r)),
  <l:Expr> "^=" <r:Expr> => Expr::XorAs(Box::new(l), Box::new(r)),
  <l:Expr> "|=" <r:Expr> => Expr::OrAs(Box::new(l), Box::new(r)),
};

LetType: Option<Ty> = {
  ":" <ty:TypeName> => Some(ty),
                    => None,
};

// Expressions

Expr: Expr = {
  LOrExpr,
  "if" <c:Expr> <t:Block> "else" <e:Block> => Expr::If(Box::new(c), Box::new(t), Some(Box::new(e))),
  "loop" <b:Block> => Expr::Loop(Box::new(b))
};

LOrExpr: Expr = {
  LAndExpr,
  <l:LOrExpr> "||" <r:LAndExpr> => Expr::LOr(Box::new(l), Box::new(r))
};

LAndExpr: Expr = {
  CmpExpr,
  <l:LAndExpr> "&&" <r:CmpExpr> => Expr::LAnd(Box::new(l), Box::new(r))
};

CmpExpr: Expr = {
  OrExpr,
  <l:OrExpr> "==" <r:OrExpr> => Expr::Eq(Box::new(l), Box::new(r)),
  <l:OrExpr> "!=" <r:OrExpr> => Expr::Ne(Box::new(l), Box::new(r)),
  <l:OrExpr> "<" <r:OrExpr> => Expr::Lt(Box::new(l), Box::new(r)),
  <l:OrExpr> ">" <r:OrExpr> => Expr::Gt(Box::new(l), Box::new(r)),
  <l:OrExpr> "<=" <r:OrExpr> => Expr::Le(Box::new(l), Box::new(r)),
  <l:OrExpr> ">=" <r:OrExpr> => Expr::Ge(Box::new(l), Box::new(r)),
};

OrExpr: Expr = {
  XorExpr,
  <l:OrExpr> "|" <r:XorExpr> => Expr::Or(Box::new(l), Box::new(r))
};

XorExpr: Expr = {
  AndExpr,
  <l:XorExpr> "^" <r:AndExpr> => Expr::Xor(Box::new(l), Box::new(r))
};

AndExpr: Expr = {
  ShiftExpr,
  <l:AndExpr> "&" <r:ShiftExpr> => Expr::And(Box::new(l), Box::new(r))
};

ShiftExpr: Expr = {
  AddExpr,
  <l:ShiftExpr> "<<" <r:AddExpr> => Expr::Lsh(Box::new(l), Box::new(r)),
  <l:ShiftExpr> ">>" <r:AddExpr> => Expr::Rsh(Box::new(l), Box::new(r)),
};

AddExpr: Expr = {
  MulExpr,
  <l:AddExpr> "+" <r:MulExpr> => Expr::Add(Box::new(l), Box::new(r)),
  <l:AddExpr> "-" <r:MulExpr> => Expr::Sub(Box::new(l), Box::new(r)),
};

MulExpr: Expr = {
  CastExpr,
  <l:MulExpr> "*" <r:CastExpr> => Expr::Mul(Box::new(l), Box::new(r)),
  <l:MulExpr> "/" <r:CastExpr> => Expr::Div(Box::new(l), Box::new(r)),
  <l:MulExpr> "%" <r:CastExpr> => Expr::Mod(Box::new(l), Box::new(r)),
};

CastExpr: Expr = {
  PreExpr,
  <e:CastExpr> "as" <t:TypeName> => Expr::Cast(Box::new(e), t),
};

PreExpr: Expr = {
  PostExpr,
  "&" <e:PreExpr> => Expr::Ref(Box::new(e)),
  "*" <e:PreExpr> => Expr::Deref(Box::new(e)),
  "+" <e:PreExpr> => Expr::UPlus(Box::new(e)),
  "-" <e:PreExpr> => Expr::UMinus(Box::new(e)),
  "~" <e:PreExpr> => Expr::Not(Box::new(e)),
  "!" <e:PreExpr> => Expr::LNot(Box::new(e)),
};

PostExpr: Expr = {
  PrimExpr,
  <e:PostExpr> "." <i:Identifier> => Expr::Dot(Box::new(e), i),
  <e:PostExpr> "(" <a:ArgumentListOpt> ")" => Expr::Call(Box::new(e), a),
  <e:PostExpr> "[" <i:Expr> ")" => Expr::Index(Box::new(e), Box::new(i)),
};

ArgumentListOpt: IndexMap<RefStr, Expr> = {
  ArgumentList,
  => indexmap! {},
}

ArgumentList: IndexMap<RefStr, Expr> = {
  <name:Identifier> ":" <expr:Expr> => indexmap! { name => expr },
  <mut map:ArgumentList> "," <name:Identifier> ":" <expr:Expr> => {
    map.insert(name, expr);
    map
  }
};

PrimExpr: Expr = {
  "(" <e:Expr> ")" => e,
  <b:Block> => b,
  <p:Path> => Expr::Path(p),
  "true" => Expr::Bool(true),
  "false" => Expr::Bool(false),
  Integer => Expr::Int(<>),
  Character => Expr::Char(<>),
  RefStr => Expr::Str(<>),
};

// Modules

TypeDefinition: () = {
  "struct" <name:Identifier> "(" <params:ParameterListOpt> ")" => {
    module.defs.insert(name, Def::Ty(Ty::Struct(params)));
  },
  "union" <name:Identifier> "(" <params:ParameterListOpt> ")" => {
    module.defs.insert(name, Def::Ty(Ty::Union(params)));
  },
  "enum" <name:Identifier> "(" <enums:EnumeratorListOpt> ")" => {
    module.defs.insert(name, Def::Ty(Ty::Enum(enums)));
  },
};

EnumeratorListOpt: IndexMap<RefStr, Ty> = {
  EnumeratorList,
  => indexmap! {},
};

EnumeratorList: IndexMap<RefStr, Ty> = {
  <e:Enumerator> => indexmap! { e.0 => e.1 },
  <mut l:EnumeratorList> "," <e:Enumerator> => {
    l.insert(e.0, e.1);
    l
  },
};

Enumerator: (RefStr, Ty) = {
  Identifier =>
    (<>, Ty::Enumerator),
  <name:Identifier> "(" <params:ParameterListOpt> ")" =>
    (name, Ty::Struct(params)),
};

FunctionDefinition: () = {
  "function" <name:Identifier>
      "(" <params:ParameterDefinitionListOpt> ")" <ret_ty:ReturnType>
      <body:Block> => {
    module.defs.insert(name, Def::Fn { params, ret_ty, body });
  }
};

ParameterDefinitionListOpt: IndexMap<RefStr, (bool, Ty)> = {
  ParameterDefinitionList,
  => indexmap! {}
};

ParameterDefinitionList: IndexMap<RefStr, (bool, Ty)> = {
  <m:"mut"?> <name:Identifier> ":" <ty:TypeName> => indexmap ! { name => (m.is_some(), ty) },
  <mut map:ParameterDefinitionList> "," <m:"mut"?> <name:Identifier> ":" <ty:TypeName> => {
    map.insert(name, (m.is_some(), ty));
    map
  },
};

ConstDefinition: () = {
  "const" <name:Identifier> ":" <ty:TypeName> "=" <val:Expr> => {
    module.defs.insert(name, Def::Const { ty, val });
  }
};

DataDefinition: () = {
  "data" <m:"mut"?> <name:Identifier> ":" <ty:TypeName> "=" <init:Expr> => {
    module.defs.insert(name, Def::Data { is_mut: m.is_some(), ty, init });
  }
};

ImportDefinition: () = "import" <name:Identifier> => {
  module.deps.insert(name);
};

ExternBlock: () = "extern" "{" Seq<ExternDefinition> "}";

ExternDefinition: () = {
  "function" <name:Identifier> "(" <params:ParameterListOpt> ")" <ret:ReturnType> => {
    module.defs.insert(name, Def::Extern { is_mut: false, ty: Ty::Fn(params, Box::new(ret)) });
  },
  "data" <m:"mut"?> <name:Identifier> ":" <ty:TypeName> => {
    module.defs.insert(name, Def::Extern { is_mut: m.is_some(), ty });
  }
};

GlobalDefinition: () = {
  TypeDefinition,
  FunctionDefinition,
  ConstDefinition,
  DataDefinition,
  ImportDefinition,
  ExternBlock,
};

pub Module: () = Seq<GlobalDefinition>;

// Tokens

Identifier: RefStr = r"[_a-zA-Z][_a-zA-Z0-9]*" => RefStr::new(<>);
Integer: usize = r"[0-9]+" => usize::from_str(<>).unwrap();
Character: RefStr = r#"'([^']|\\')*'"# => RefStr::new(<>);
RefStr: RefStr = r#""([^"]|\\")*""# => RefStr::new(<>);

// Macros

Seq<T>: Vec<T> = <v:(<T>)*> => v;

Comma<T>: Vec<T> = {
  <mut v:(<T> ",")*> <e:T?> => match e {
    None => v,
    Some(e) => {
      v.push(e);
      v
    }
  }
};
